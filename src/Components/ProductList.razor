@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web

@inject JsonFileProductService ProductService

<!-- Show cards only if there are products to display -->
@if (Products != null && Products.Any())
{
	<div class="card-deck-wrapper">
		<div class="card-deck">
			@foreach (var product in Products)
			{
				<!-- Individual product card -->
				<div class="card">
					<div class="card-img" style="background-image: url('@product.ImageUrl');">
					</div>
					<div class="card-body">
						<h5 class="card-title">@product.Title</h5>
					</div>
					<div class="card-footer">
						<small class="text-muted">
							<!-- View button opens modal with details -->
							<button @onclick="(e => SelectProduct(product.Id))"
							data-toggle="modal" data-target="#productModal" class="btn btn-primary">
								View Superhero
							</button>
						</small>
					</div>
				</div>
			}
		</div>
	</div>
}

<!-- Modal to show selected product's details -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		@if (selectedProduct != null)
		{
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
					<button type="button" class="close-modal" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="card">
						<div class="modal-card-img" style="background-image: url('@selectedProduct.ImageUrl');">
						</div>
						<div class="card-body">
							<p class="card-text">Real name: @selectedProduct.Fullname</p>
							<p class="card-text">Birthplace: @selectedProduct.Birthplace</p>
							<p class="card-text">Work: @selectedProduct.Work</p>
							<p class="card-text">First Appearance: @selectedProduct.FirstAppear</p>
							<p class="card-text">Power statistics:</p>
							<ul class="power-stats">
								<li>
									<span>Intelligence</span>
									<div class="stats-bar">
										<div class="stats-bar-fill intelligence" style="--value: @selectedProduct.Intelligence%;"></div>
									</div>
								</li>
								<li>
									<span>Strength</span>
									<div class="stats-bar">
										<div class="stats-bar-fill strength" style="--value: @selectedProduct.Strength%;"></div>
									</div>
								</li>
								<li>
									<span>Speed</span>
									<div class="stats-bar">
										<div class="stats-bar-fill speed" style="--value: @selectedProduct.Speed%;"></div>
									</div>
								</li>
								<li>
									<span>Durability</span>
									<div class="stats-bar">
										<div class="stats-bar-fill durability" style="--value: @selectedProduct.Durability%;"></div>
									</div>
								</li>
								<li>
									<span>Power</span>
									<div class="stats-bar">
										<div class="stats-bar-fill power" style="--value: @selectedProduct.Power%;"></div>
									</div>
								</li>
								<li>
									<span>Combat</span>
									<div class="stats-bar">
										<div class="stats-bar-fill combat" style="--value: @selectedProduct.Combat%;"></div>
									</div>
								</li>
							</ul>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					@if (voteCount == 0)
					{
						<span>Be the first to vote!</span>
					}
					else
					{
						<span>@voteCount @voteLabel</span>
					}

					<!-- Render stars for rating (1 to 5) -->
					@for (int i = 1; i < 6; i++)
					{
						var currentStar = i;

						<!-- Highlight star if it is within the current average rating -->
						if (i <= currentRating)
						{
							<span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
						}
						else
						{
							<span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
						}
					}
				</div>
			</div>
		}
	</div>
</div>

<!-- Font Awesome for star rating display -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code {
	ProductModel? selectedProduct;
	string? selectedProductId;

	// List of products passed from parent component
	[Parameter]
	public IEnumerable<ProductModel> Products { get; set; }

	/// <summary>
	/// Selects the product and updates rating information
	/// </summary>
	/// <param name="productId">ID of product to select</param>
	void SelectProduct(string productId)
	{
		Products = ProductService.GetProducts().ToList();
		selectedProductId = productId;
		selectedProduct = Products.First(x => x.Id == productId);
		GetCurrentRating();
	}

	int currentRating = 0;
	int voteCount = 0;
	string? voteLabel;

	/// <summary>
	/// Computes the average rating and vote count for the selected product
	/// </summary>
	void GetCurrentRating()
	{
		if (selectedProduct?.Ratings == null)
		{
			currentRating = 0;
			voteCount = 0;
		}
		else
		{
			voteCount = selectedProduct.Ratings.Count();
			voteLabel = voteCount > 1 ? "Votes" : "Vote";
			currentRating = selectedProduct.Ratings.Sum() / voteCount;
		}

		System.Console.WriteLine($"Current rating for {selectedProduct?.Id}: {currentRating}");
	}

	/// <summary>
	/// Submits a new rating for the currently selected product
	/// </summary>
	/// <param name="rating">Rating value (1–5)</param>
	void SubmitRating(int rating)
	{
		System.Console.WriteLine($"Rating received for {selectedProduct?.Id}: {rating}");

		if (selectedProductId == null)
			return;

		ProductService.AddRating(selectedProductId, rating);

		// Refresh selected product and its rating info
		SelectProduct(selectedProductId);
	}
}
