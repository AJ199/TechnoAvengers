@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

@if(Products != null && Products.Any())
{
	<div class="card-columns">
		@foreach (var product in Products)
		{
			<div class="card">
				<div class="card-img" style="background-image: url('@product.ImageUrl');">
				</div>
				<div class="card-body">
					<h5 class="card-title">@product.Title</h5>
				</div>
				<div class="card-footer">
					<small class="text-muted">
						<button @onclick="(e => SelectProduct(product.Id))"
								data-toggle="modal" data-target="#productModal" class="btn btn-primary">
							View Superhero
						</button>
					</small>
				</div>
			</div>
		}
	</div>
}

<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered" role="document">
		@if (selectedProduct != null)
		{
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div class="card">
						<div class="modal-card-img" style="background-image: url('@selectedProduct.ImageUrl');">
						</div>
						<div class="card-body">
							<p class="card-text">Real name: @selectedProduct.Fullname</p>
							<p class="card-text">Birthplace: @selectedProduct.Birthplace</p>
							<p class="card-text">Work: @selectedProduct.Work</p>
                            <p class="card-text">First Appearance: @selectedProduct.FirstAppear</p>
                            <p class="card-text">Power statistics:</p>
							<ul>
								<li>Intelligence: @selectedProduct.Intelligence</li>
								<li>Strength: @selectedProduct.Strength</li>
								<li>Speed: @selectedProduct.Speed</li>
								<li>Durability: @selectedProduct.Durability</li>
								<li>Power: @selectedProduct.Power</li>
								<li>Combat: @selectedProduct.Combat</li>
							</ul>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					@if (voteCount == 0)
					{
						<span>Be the first to vote!</span>
					}
					else
					{
						<span>@voteCount @voteLabel</span>
					}
					@for (int i = 1; i < 6; i++)
					{
						var currentStar = i;
						if (i <= currentRating)
						{
							<span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
						}
						else
						{
							<span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
						}
					}
				</div>
			</div>
		}
	</div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
	ProductModel? selectedProduct;
	string? selectedProductId;

	[Parameter]
	public IEnumerable<ProductModel> Products { get; set; }

	// New filter property
	string selectedFilter = "All"; // Could be based on alignment, role, etc.

	// Get filtered products based on the selectedFilter
	IEnumerable<ProductModel> GetFilteredProducts()
	{
		if (selectedFilter == "All")
		{
			return ProductService.GetProducts();
		}
		else
		{
			return ProductService.GetProducts().Where(p => p.Alignment == selectedFilter); // Modify this condition based on the filter logic
		}
	}

	void SelectProduct(string productId)
	{
		selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string? voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct?.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct?.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct?.Id}: {rating}");
        if (selectedProductId == null)
            return;
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }
}
