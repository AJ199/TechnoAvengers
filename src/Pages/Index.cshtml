@page
@using ContosoCrafts.WebSite.Components
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<div class="header-container">
    <h1 class="hero-text">Team 3 Techno Avengers</h1>
    <button class="filter-button" onclick="openFilterSidebar()">Filter</button>
</div>

@(await Html.RenderComponentAsync<ProductList>(RenderMode.ServerPrerendered, new { Products = Model.FilteredHeroes }))

<!-- Sidebar (Initially Hidden) -->
<div id="filterSidebar" class="sidebar">
    <div class="sidebar-header">
        <h4>Filter</h4>
        <span class="close-btn" onclick="closeSidebar()">×</span>
    </div>

    <form method="get" onsubmit="return handleFilterSubmit();">
        <label for="filterCategory"><strong>Filter by:</strong></label>
        <select id="filterCategory" onchange="updateFilterOptions()" class="filterCategory">
            <option value="">Select Category</option>
            <option value="Alignment">Alignment</option>
            <option value="Role">Role</option>
        </select>

        <select id="filterValue" name="FilterValue" class="filterValue">
            <option value="">Select a value</option>
        </select>

        <input type="hidden" name="FilterCategory" id="filterCategoryHidden" />
        <input type="hidden" name="sidebar" value="open" />
        <button type="submit">Filter</button>
        <button type="button" onclick="clearFilter()">Clear Filter</button>
        <p>@Model.FilteredHeroes.Count superhero(s) found</p>
    </form>
</div>

<script src="_framework/blazor.server.js"></script>
<script>
    function openFilterSidebar() {
        document.getElementById("filterSidebar").classList.add("show");
    }

    function closeSidebar() {
        document.getElementById("filterSidebar").classList.remove("show");
    }

    const filterOptions = {
        Alignment: ["good", "bad"],
        Role: ["Core Avenger","Founding Avenger","Mystic Defender","Guardian"]
    };

    function updateFilterOptions() {
        const category = document.getElementById("filterCategory").value;
        const valueSelect = document.getElementById("filterValue");
        const hiddenCategory = document.getElementById("filterCategoryHidden");

        hiddenCategory.value = category;
        valueSelect.innerHTML = '<option value="">Select a value</option>';

        if (category && filterOptions[category]) {
            filterOptions[category].forEach(value => {
                const option = document.createElement("option");
                option.value = value;
                option.textContent = value.charAt(0).toUpperCase() + value.slice(1);
                valueSelect.appendChild(option);
            });
        }
    }

    function handleFilterSubmit() {
        const category = document.getElementById("filterCategory").value;
        const value = document.getElementById("filterValue").value;

        if (!category || !value) {
            alert("Please select both a category and a value.");
            return false;
        }

        return true;
    }

        function clearFilter() {
        // Reset dropdowns
        document.getElementById("filterCategory").value = "";
        document.getElementById("filterValue").innerHTML = '<option value="">Select a value</option>';
        document.getElementById("filterCategoryHidden").value = "";

        // Reload the page without filter query params
        window.location.href = window.location.pathname;
    }

    window.addEventListener('DOMContentLoaded', () => {
        const params = new URLSearchParams(window.location.search);

        // Open the sidebar if needed
        if (params.get('sidebar') === 'open') {
            openFilterSidebar();
        }

        const selectedCategory = params.get('FilterCategory');
        const selectedValue = params.get('FilterValue');

        if (selectedCategory) {
            document.getElementById('filterCategory').value = selectedCategory;
            updateFilterOptions(); // Populate filterValue options

            if (selectedValue) {
                // Delay setting value until options are populated
                setTimeout(() => {
                    document.getElementById('filterValue').value = selectedValue;
                }, 50);
            }

            // Set the hidden input so it persists on form submit
            document.getElementById('filterCategoryHidden').value = selectedCategory;
        }
    });



</script>