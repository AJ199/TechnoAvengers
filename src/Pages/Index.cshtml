@page
@using ContosoCrafts.WebSite.Components
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="header-container">

    <!-- Search and sort form -->
    <form method="get" id="searchForm" class="search-bar-container">

        <!-- Search input section -->
        <div class="search-input-group">
            <input type="text" name="SearchTerm" placeholder="Search by name..."
                   value="@Request.Query["SearchTerm"]"
                   class="search-input" />
            <button type="submit" class="search-btn">Search</button>
        </div>

        <!-- Dropdown to select the field to sort by -->
        <select name="SortField" class="sort-dropdown">
            <!-- Each option sets selected based on current query value -->
            <option value="Title" selected="@("Title" == Request.Query["SortField"])">Sort by Name</option>
            <option value="Intelligence" selected="@("Intelligence" == Request.Query["SortField"])">Sort by Intelligence</option>
            <option value="Strength" selected="@("Strength" == Request.Query["SortField"])">Sort by Strength</option>
            <option value="Speed" selected="@("Speed" == Request.Query["SortField"])">Sort by Speed</option>
            <option value="Durability" selected="@("Durability" == Request.Query["SortField"])">Sort by Durability</option>
            <option value="Power" selected="@("Power" == Request.Query["SortField"])">Sort by Power</option>
            <option value="Combat" selected="@("Combat" == Request.Query["SortField"])">Sort by Combat</option>
        </select>

        <!-- Hidden input to track current sort order (asc or desc) -->
        <input type="hidden" name="SortOrder" id="SortOrderInput" value="@(Request.Query["SortOrder"].ToString() ?? "asc")" />

        <!-- Button to toggle the sort order, submits the form on click -->
        <button type="button" class="sort-btn-toggle" onclick="toggleSortOrder()">
            @(Request.Query["SortOrder"] == "desc" ? "▼ Descending" : "▲ Ascending")
        </button>

        <!-- Button to open filter sidebar -->
        <button type="button" class="btn btn-terciary" onclick="openFilterSidebar()">Filter</button>

        <!-- Button to clear all filters and sorting -->
        <button type="button" class="btn btn-secondary" onclick="clearAll()">Clear All</button>

        <!-- Preserve selected filter values (checkbox/radio) for Alignment, Role, and Gender -->
        @foreach (var category in new[] { "Alignment", "Role", "Gender" })
        {
            foreach (var value in Request.Query[category])
            {
                <input type="hidden" name="@category" value="@value" />
            }
        }

        <!-- Preserve min/max range filters for each stat in the query -->
        @foreach (var stat in new[] { "Intelligence", "Strength", "Speed", "Durability", "Power", "Combat" })
        {
            <input type="hidden" name="@($"{stat}Min")" value="@Request.Query[$"{stat}Min"].FirstOrDefault() ?? " 1"" />
            <input type="hidden" name="@($"{stat}Max")" value="@Request.Query[$"{stat}Max"].FirstOrDefault() ?? " 100"" />
        }
    </form>
</div>


<!-- Display number of superheroes found -->
@if (Request.Query.Count > 0)
{
    if (Model.FilteredHeroes.Count == 1)
    {
        <p class="hero-text hero-subtext">
            <span class="numbers">@Model.FilteredHeroes.Count</span> superhero found
        </p>
    }

    else if (Model.FilteredHeroes.Count > 1)
    {
        <p class="hero-text hero-subtext">
            <span class="numbers">@Model.FilteredHeroes.Count superheroes found</span>
        </p>
    }
    else
    {
        <p class="hero-text hero-subtext">No superheroes found</p>
    }
}

<!-- Display filtered superheroes using Blazor component -->
@(await Html.RenderComponentAsync<ProductList>(RenderMode.ServerPrerendered, new { Products = Model.FilteredHeroes }))

<!-- Sidebar filter menu (hidden by default) -->
<div id="filterSidebar" class="sidebar">
    <div class="sidebar-header">
        <h4>Filter by:</h4>
        <span class="close-btn" onclick="closeSidebar()">×</span>
    </div>

    <!-- Filter form -->
    <div class="sidebar-content">
        <form method="get" id="filterForm">
            @foreach (var category in new[] { "Alignment", "Role", "Gender" })
            {
                <div class="filter-group">
                    <strong>@category</strong>
                    <div class="filter-options">
                        @foreach (var value in Model.GetValuesForCategory(category))
                        {
                            <label>
                                <input type="checkbox" name="@category" value="@value"
                                @(Request.Query[category].Contains(value) ? "checked" : "") />
                                @value
                            </label>
                        }
                    </div>
                </div>
            }

            <!-- Powerstats sliders -->
            <div class="filter-group">
                <strong>Powerstats</strong>
                @foreach (var stat in new[] { "Intelligence", "Strength", "Speed", "Durability", "Power", "Combat" })
                {
                    <div class="stat-slider">
                        <label class="stat-slider-label">@stat: </label>

                        <div class="slider-container">
                            <span class="slider-container-value min-value">@(Request.Query[$"{stat}Min"].FirstOrDefault() ?? "1")</span>

                            <md-slider min="1"
                                       max="100"
                                       value-start="@Request.Query[$"{stat}Min"].FirstOrDefault() ?? " 1""
                                       value-end="@Request.Query[$"{stat}Max"].FirstOrDefault() ?? " 100""
                                       data-stat="@stat"
                                       range>
                            </md-slider>
                            <span class="slider-container-value max-value">@(Request.Query[$"{stat}Max"].FirstOrDefault() ?? "100")</span>
                        </div>

                        <input type="hidden" name="@(stat)Min" id="@(stat)Min" value="@(Request.Query[$"{stat}Min"].FirstOrDefault() ?? "1")" />
                        <input type="hidden" name="@(stat)Max" id="@(stat)Max" value="@(Request.Query[$"{stat}Max"].FirstOrDefault() ?? "100")" />

                    </div>
                }
            </div>

            <input type="hidden" name="SearchTerm" value="@Request.Query["SearchTerm"]" />
            <button type="submit" class="btn btn-filter-confirm">Apply Filter</button>
            <button type="button" class="btn btn-filter-clear" onclick="clearFilter()">Clear Filters</button>
        </form>
    </div>
</div>


<script src="_framework/blazor.server.js"></script>
<script>
    /// <summary>
    /// Toggles the sort order between ascending and descending, then submits the search form
    /// </summary>
    function toggleSortOrder() {
        const input = document.getElementById('SortOrderInput');
        // Toggle between ascending and descending
        input.value = input.value === 'asc' ? 'desc' : 'asc';
        document.getElementById('searchForm').submit();
    }

    /// <summary>
    /// Opens the filter sidebar and initializes sliders
    /// </summary>
    function openFilterSidebar()
    {
        document.getElementById("filterSidebar").classList.add("show");
        setupSliders();
    }

    /// <summary>
    /// Closes the filter sidebar
    /// </summary>
    function closeSidebar()
    {
        document.getElementById("filterSidebar").classList.remove("show");
    }

    /// <summary>
    /// Clears all checkbox filters, resets sliders to defaults, and submits the filter form
    /// </summary>
    function clearFilter()
    {
        // Unchecks the filers
        document.querySelectorAll('input[type="checkbox"]').forEach(function(cb)
        {
            cb.checked = false;
        });

        // Slider components in Filter sidebar
        var sliders = document.querySelectorAll('md-slider');
        sliders.forEach(function(slider)
        {
            slider.valueStart = 1;
            slider.valueEnd = 100;

            // The name of the statistic, as defined in the slider’s data-stat attribute
            const statName = slider.getAttribute('data-stat');

            // The nearest parent element with the 'stat-slider' class
            const container = slider.closest('.stat-slider');

            // The element displaying the minimum value for this stat
            const minValue = container.querySelector('.min-value');

            // The element displaying the maximum value for this stat
            const maxValue = container.querySelector('.max-value');

            // The hidden input field used to store the slider’s minimum value on form submit
            const minInput = document.getElementById(`${statName}Min`);

             // The hidden input field used to store the slider’s maximum value on form submit
            const maxInput = document.getElementById(`${statName}Max`);

            minValue.textContent = '1';
            maxValue.textContent = '100';

            if (minInput)
            {
                minInput.value = '1';
            }

            if (maxInput)
            {
                maxInput.value = '100';
            }
        });

        // Submit the filter form
        document.getElementById('filterForm').submit();
    }

    /// <summary>
    /// Clears the search input, unchecks filters, resets sliders, and reloads the page
    /// </summary>
    function clearAll()
    {
        // Clear search term
        document.querySelector('input[name="SearchTerm"]').value = '';

        // Unchecks the filters
        document.querySelectorAll('input[type="checkbox"]').forEach(function(cb)
        {
            cb.checked = false;
        });

        // Slider components in Filter sidebar
        var sliders = document.querySelectorAll('md-slider');
        sliders.forEach(function(slider)
        {
            slider.valueStart = 1;
            slider.valueEnd = 100;

            // The name of the statistic, as defined in the slider’s data-stat attribute
            const statName = slider.getAttribute('data-stat');

            // The nearest parent element with the 'stat-slider' class
            const container = slider.closest('.stat-slider');

            // The element displaying the minimum value for this stat
            const minValue = container.querySelector('.min-value');

            // The element displaying the maximum value for this stat
            const maxValue = container.querySelector('.max-value');

            // The hidden input field used to store the slider’s minimum value on form submit
            const minInput = document.getElementById(`${statName}Min`);

            // The hidden input field used to store the slider’s maximum value on form submit
            const maxInput = document.getElementById(`${statName}Max`);

            minValue.textContent = '1';
            maxValue.textContent = '100';

           if (minInput)
            {
                minInput.value = '1';
            }

            if (maxInput)
            {
                maxInput.value = '100';
            }
        });

        // Reload page
        window.location.href = window.location.pathname;
    }


    /// <summary>
    /// Configures each slider’s start/end values and attaches input listeners
    /// to keep displayed values and hidden inputs in sync.
    /// </summary>
    function setupSliders()
    {
        // Slider components in Filter sidebar
        var sliders = document.querySelectorAll('md-slider');

        sliders.forEach(function(slider)
        {
            // The name of the statistic, as defined in the slider’s data-stat attribute
            const statName = slider.getAttribute('data-stat');

            // The nearest parent element with the 'stat-slider' class
            const container = slider.closest('.stat-slider');

            // The element displaying the minimum value for this stat
            const minValue = container.querySelector('.min-value');

            // The element displaying the maximum value for this stat
            const maxValue = container.querySelector('.max-value');

            // The hidden input field used to store the slider’s minimum value on form submit
            const minInput = document.getElementById(`${statName}Min`);

            // The hidden input field used to store the slider’s maximum value on form submit
            const maxInput = document.getElementById(`${statName}Max`);

            if (minInput && maxInput)
            {
                slider.valueStart = parseInt(minInput.value) || 1;
                slider.valueEnd = parseInt(maxInput.value) || 100;
                minValue.textContent = slider.valueStart;
                maxValue.textContent = slider.valueEnd;
            }

            // Update on user interaction
            slider.addEventListener('input', function()
            {
                // Start slider value
                const startValue = slider.valueStart;

                // End slider value
                const endValue = slider.valueEnd;

                minValue.textContent = startValue;
                maxValue.textContent = endValue;

                if (minInput)
                {
                    minInput.value = startValue;
                }

                if (maxInput)
                {
                    maxInput.value = endValue;
                }
            });
        });
    }

    /// <summary>
    /// On DOMContentLoaded, open sidebar if requested and initialize sliders.
    /// </summary>
    document.addEventListener('DOMContentLoaded', function()
    {
        // URL parameters
        const params = new URLSearchParams(window.location.search);

        if (params.get('sidebar') === 'open')
        {
            openFilterSidebar();
        }

        setupSliders();
    });

    // On form submit, update hidden slider input fields
    document.getElementById('filterForm')?.addEventListener('submit', function(e) {

        // Slider components in Filter sidebar
        var sliders = document.querySelectorAll('md-slider');

        sliders.forEach(function(slider)
        {
            // The name of the statistic, as defined in the slider’s data-stat attribute
            const statName = slider.getAttribute('data-stat');

            // The hidden input field used to store the slider’s minimum value on form submit
            const minInput = document.getElementById(`${statName}Min`);

            // The hidden input field used to store the slider’s maximum value on form submit
            const maxInput = document.getElementById(`${statName}Max`);

            if (minInput && maxInput)
            {
                minInput.value = slider.valueStart;
                maxInput.value = slider.valueEnd;
            }
        });
    });
</script>