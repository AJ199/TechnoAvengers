@page
@using ContosoCrafts.WebSite.Components
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<div class="header-container">
    <!-- Team name -->
    <h1 class="hero-text">Team 3 Techno Avengers</h1>

    <!-- Button to open the filter sidebar -->
    <button class="btn btn-terciary" onclick="openFilterSidebar()">Filter</button>
</div>

<!-- Display the count of superheroes in display -->
@if (Model.FilteredHeroes.Count == 1)
{
    <p class="hero-text hero-subtext">
        <span class="numbers">@Model.FilteredHeroes.Count</span> superhero found
    </p>
}
else if (Model.FilteredHeroes.Count > 1)
{
    <p class="hero-text hero-subtext">
        <span class="numbers">@Model.FilteredHeroes.Count superheroes found</span>
    </p>
}
else
{
    <p class="hero-text hero-subtext">No superheroes match the selected filters</p>
}

<!-- Render the ProductList component, passing in filtered superheroes -->
@(await Html.RenderComponentAsync<ProductList>(RenderMode.ServerPrerendered, new { Products = Model.FilteredHeroes }))

<!-- Sidebar (Initially Hidden) -->
<div id="filterSidebar" class="sidebar">
    <div class="sidebar-header">
        <h4>Filter by:</h4>
        <span class="close-btn" onclick="closeSidebar()">×</span>
    </div>

    <!-- Filter Form -->
    <div class="sidebar-content">
        <form method="get" id="filterForm">
            @foreach (var category in new[] { "Alignment", "Role", "Gender" })
            {
                <div class="filter-group">
                    <strong>@category</strong>
                    <div class="filter-options">
                        @foreach (var value in Model.GetValuesForCategory(category))
                        {
                            <label>
                                <input type="checkbox" name="@category" value="@value"
                                @(Request.Query[category].Contains(value) ? "checked" : "") />
                                @value
                            </label>
                        }
                    </div>
                </div>
            }
            <!-- Powerstats Range Sliders -->
            <div class="filter-group">
                <strong>Powerstats</strong>
                @foreach (var stat in new[] { "Intelligence", "Strength", "Speed", "Durability", "Power", "Combat" })
                {
                    <div class="stat-slider">
                        <label>@stat: </label>
                        <span class="slider-values min-value">@(Request.Query[$"{stat}Min"].FirstOrDefault() ?? "1")</span>
                        <span> - </span>
                        <span class="slider-values max-value">@(Request.Query[$"{stat}Max"].FirstOrDefault() ?? "100")</span>
                        <div class="slider-container">
                            <md-slider min="1"
                                       max="100"
                                       value-start="@Request.Query[$"{stat}Min"].FirstOrDefault() ?? " 1""
                                       value-end="@Request.Query[$"{stat}Max"].FirstOrDefault() ?? " 100""
                                       data-stat="@stat"
                                       labeled
                                       range>
                            </md-slider>
                            <input type="hidden" name="@(stat)Min" id="@(stat)Min" value="@(Request.Query[$"{stat}Min"].FirstOrDefault() ?? "1")" />
                            <input type="hidden" name="@(stat)Max" id="@(stat)Max" value="@(Request.Query[$"{stat}Max"].FirstOrDefault() ?? "100")" />
                        </div>
                    </div>
                }
            </div>

            <button type="submit" class="btn btn-filter-confirm">Apply Filter</button>
            <button type="button" class="btn btn-filter-clear" onclick="clearFilter()">Clear Filters</button>
        </form>
    </div>
</div>

<!-- Blazor Server script -->
<script src="_framework/blazor.server.js"></script>
<script>
    /// <summary>
    /// Opens the filter sidebar by adding the 'show' class
    /// </summary>
    function openFilterSidebar() {
        document.getElementById("filterSidebar").classList.add("show");
        setupSliders();
    }

    /// <summary>
    /// Closes the filter sidebar by removing the 'show' class
    /// </summary>
    function closeSidebar() {
        document.getElementById("filterSidebar").classList.remove("show");
    }

    /// <summary>
    /// Unchecks all the checkboxes and reloads the page without query parameters
    /// </summary>
    function clearFilter() {
        // window.location.href = window.location.pathname;
        document.querySelectorAll('input[type="checkbox"]').forEach(function(cb)
        {
            cb.checked = false;
        });

        // All sliders
        var sliders = document.querySelectorAll('md-slider');
        sliders.forEach(function(slider)
        {
            slider.valueStart = 1;
            slider.valueEnd = 100;

            const statName = slider.getAttribute('data-stat');
            const container = slider.closest('.stat-slider');
            const minValue = container.querySelector('.min-value');
            const maxValue = container.querySelector('.max-value');
            const minInput = document.getElementById(`${statName}Min`);
            const maxInput = document.getElementById(`${statName}Max`);

            minValue.textContent = '1';
            maxValue.textContent = '100';

            if (minInput) minInput.value = '1';
            if (maxInput) maxInput.value = '100';
        });

        // Submit the form to apply changes
        document.getElementById('filterForm').submit();
    }


    /// <summary>
    /// Initializes slider values and sets up change listeners
    /// </summary>
    function setupSliders()
    {
        // All sliders
        var sliders = document.querySelectorAll('md-slider');

        sliders.forEach(function(slider)
        {
            // Get elements of each slider
            const statName = slider.getAttribute('data-stat');
            const container = slider.closest('.stat-slider');
            const minValue = container.querySelector('.min-value');
            const maxValue = container.querySelector('.max-value');

            // Get input elements
            const minInput = document.getElementById(`${statName}Min`);
            const maxInput = document.getElementById(`${statName}Max`);

            // If there are inputs, update values
            if (minInput && maxInput)
            {
                slider.valueStart = parseInt(minInput.value) || 1;
                slider.valueEnd = parseInt(maxInput.value) || 100;
                minValue.textContent = slider.valueStart;
                maxValue.textContent = slider.valueEnd;
            }

            // Add event listener for value changes
            slider.addEventListener('change', function()
            {
                // Get updated values
                const startValue = slider.valueStart;
                const endValue = slider.valueEnd;

                // Update display values
                minValue.textContent = startValue;
                maxValue.textContent = endValue;

                // Update input values
                if (minInput)
                {
                    minInput.value = startValue;
                }

                if (maxInput)
                {
                    maxInput.value = endValue;
                }
            });
        });
    }

    /// <summary>
    /// Preserves filter state and initializes sliders on page load
    /// </summary>
    document.addEventListener('DOMContentLoaded', function()
    {
        // Query parameters
        const params = new URLSearchParams(window.location.search);

        // Open sidebar if sidebar param is 'open'
        if (params.get('sidebar') === 'open')
        {
            openFilterSidebar();
        }

        setupSliders();
    });

    /// <summary>
    /// Handles form submission to ensure proper query parameters
    /// </summary>
    document.getElementById('filterForm')?.addEventListener('submit', function(e) {

        // Update all hidden inputs before submission
        document.querySelectorAll('md-slider').forEach(slider =>
            {
                const statName = slider.getAttribute('data-stat');
                const minInput = document.getElementById(`${statName}Min`);
                const maxInput = document.getElementById(`${statName}Max`);

                if (minInput && maxInput)
                {
                    minInput.value = slider.valueStart;
                    maxInput.value = slider.valueEnd;
                }
            }
        );
    });

</script>